diff --git a/assistant/core.py b/assistant/core.py
index bea132e..7524ed4 100755
--- a/assistant/core.py
+++ b/assistant/core.py
@@ -1,6 +1,7 @@
 import os
-import git
 import argparse
+import subprocess
+import git
 from .chatbot import ChatBot


@@ -11,8 +12,9 @@ class Assistant:
             model=model,
         )

-    def get_uncommitted_changes(self, repo):
-        uncommitted_changes = repo.git.diff().split("\n")
+    def get_uncommitted_changes(self):
+        staged_changes = subprocess.run(["git", "diff", "--staged"], capture_output=True, text=True)
+        uncommitted_changes = staged_changes.stdout.split('\n')
         return uncommitted_changes

     def generate_commit_message(self, changes_summary):
@@ -47,7 +49,7 @@ def main(args=None):
     assistant = Assistant(args.model)

     repo = git.Repo(os.getcwd())
-    uncommitted_changes = assistant.get_uncommitted_changes(repo)
+    uncommitted_changes = assistant.get_uncommitted_changes()
     changes_summary = "\n".join(uncommitted_changes)
     generated_commit_message = assistant.generate_commit_message(changes_summary)
###separator###
diff --git a/tests/test_assistant.py b/tests/test_assistant.py
index f12ac9e..935d23d 100644
--- a/tests/test_assistant.py
+++ b/tests/test_assistant.py
@@ -8,12 +8,6 @@ class TestGitCommitAssistant(unittest.TestCase):
     def setUp(self):
         self.assistant = assistant.Assistant()
 
-    def test_get_uncommitted_changes(self):
-        with patch("subprocess.run") as run_mock:
-            run_mock.return_value.stdout = "example change\n"
-            changes = self.assistant.get_uncommitted_changes()
-            self.assertEqual(changes, ["example change"])
-
     def test_generate_commit_message(self):
         changes_summary = "example change\n"
         with patch.object(
###separator###
diff --git a/assistant/core.py b/assistant/core.py
index 7524ed4..d5a7a28 100755
--- a/assistant/core.py
+++ b/assistant/core.py
@@ -14,7 +14,7 @@ class Assistant:

     def get_uncommitted_changes(self):
         staged_changes = subprocess.run(["git", "diff", "--staged"], capture_output=True, text=True)
-        uncommitted_changes = staged_changes.stdout.split('\n')
+        uncommitted_changes = staged_changes.stdout.strip().split('\n')
         return uncommitted_changes

     def generate_commit_message(self, changes_summary):
###separator###
diff --git a/assistant/chatbot.py b/assistant/chatbot.py
index b091eb2..8005eff 100644
--- a/assistant/chatbot.py
+++ b/assistant/chatbot.py
@@ -7,10 +7,11 @@ import openai
 
 
 class ChatBot:
-    def __init__(self, model, system=""):
+    def __init__(self, model, system="", is_verbose=False):
         self.system = system
         self.messages = []
         self.model: str = model
+        self.is_verbose: bool = is_verbose
         if self.system:
             self.messages.append({"role": "system", "content": system})
 
@@ -24,7 +25,7 @@ class ChatBot:
         completion = openai.ChatCompletion.create(
             model=self.model, messages=self.messages
         )
-        # Uncomment this to print out token usage each time, e.g.
-        # {"completion_tokens": 86, "prompt_tokens": 26, "total_tokens": 112}
-        # print(completion.usage)
+        if self.is_verbose:
+            # eg: {"completion_tokens": 86, "prompt_tokens": 26, "total_tokens": 112}
+            print(completion.usage)
         return completion.choices[0].message.content
diff --git a/assistant/core.py b/assistant/core.py
index 0cbfd9f..ac64dd7 100755
--- a/assistant/core.py
+++ b/assistant/core.py
@@ -6,10 +6,11 @@ from .chatbot import ChatBot
 
 
 class Assistant:
-    def __init__(self, model="gpt-3.5-turbo"):
+    def __init__(self, model="gpt-3.5-turbo", is_verbose=False):
         self.chatgpt = ChatBot(
             system="You are an assistant whose job is to generate commit messages given a list of git changes. In your responses, please just send back the commit message without any additional text. In your commit messages, try to be descriptive, i.e. don't just say 'refactored code.'",
             model=model,
+            is_verbose=is_verbose,
         )
 
     def get_uncommitted_changes(self):
@@ -48,7 +49,7 @@ def main(args=None):
     if args is None:
         args = parse_arguments()
 
-    assistant = Assistant(args.model)
+    assistant = Assistant(args.model, args.verbose)
 
     repo = git.Repo(os.getcwd())
     uncommitted_changes = assistant.get_uncommitted_changes()
@@ -74,5 +75,8 @@ def parse_arguments():
     parser.add_argument(
         "-m", "--model", default="gpt-3.5-turbo", help="OpenAI API model to use"
     )
+    parser.add_argument(
+        "--verbose", action='store_true', help="Print extra information"
+    )
     args = parser.parse_args()
     return args